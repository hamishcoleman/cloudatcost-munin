#!/usr/bin/env perl
use warnings;
use strict;
#
# Quick commandline tool to call each cloudatcost API entry point
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use Getopt::Long 2.33 qw(:config gnu_getopt);
use Pod::Usage;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use HC::CredentialStore;
use HC::Cache::Dir;
use REST::JSONRequest;
use CloudAtCost;


my $option = {
    preset   => 'cac',
    verbose  => 0,
};
my @option_list = (
    "preset|s=s",
    "credfile=s",
    "verbose|v+",
    "cachedir=s",
    "help",
);

###############################################################################
##
## Standard options processor
sub do_options {
    my $option = shift;
    if (!GetOptions($option,@_)) {
        print("Options: ",join(", ",@_),"\n");
        pod2usage(2);
    }
    if ($option->{man}) {
        pod2usage(-exitstatus => 0, -verbose => 2);
    }

    if ($option->{quiet}) {
        delete $option->{verbose};
    }
}

###############################################################################

# FIXME - should this logic move into the cache package?
sub calculate_cachedir {
    if (defined($option->{cachedir})) {
        # manually setting it on the cmdline takes precedence
        return $option->{cachedir};
    }

    # finally, fall back to something in our home directory
    return $ENV{'HOME'}.'/.cache/cloudatcost';
}

sub cmd_listservers {
    my $service = shift;
    return $service->listservers();
}

sub cmd_resources {
    my $service = shift;
    return $service->resources();
}

sub cmd_fixme {
    die "FIXME";
}

my $cmds = {
    'listservers'   => {
        cmd  => \&cmd_listservers,
        help => 'List all servers on the account',
    },
    'listtemplates' => {
        cmd  => \&cmd_fixme,
        help => 'List all servers on the account',
    },
    'listtasks' => {
        cmd  => \&cmd_fixme,
        help => 'List all servers on the account',
    },
    'powerop' => {
        cmd  => \&cmd_fixme,
        help => 'List all servers on the account',
    },
    'runmode' => {
        cmd  => \&cmd_fixme,
        help => 'Set the run mode of the server',
    },
    'renameserver' => {
        cmd  => \&cmd_fixme,
        help => 'Rename the server label',
    },
    'rdns' => {
        cmd  => \&cmd_fixme,
        help => 'Modify the reverse DNS & hostname of the VPS',
    },
    'console' => {
        cmd  => \&cmd_fixme,
        help => 'Request URL for console access',
    },
    'cloudpro/build' => {
        cmd  => \&cmd_fixme,
        help => 'Build a server from available resources',
    },
    'cloudpro/delete' => {
        cmd  => \&cmd_fixme,
        help => 'Delete / terminate server to add resources',
    },
    'cloudpro/resources' => {
        cmd  => \&cmd_resources,
        help => 'Display resources available and resources used in cloud-pro',
    },
};

sub main() { 
    do_options($option,@option_list);
    if (defined($option->{help})) {
        print("Sub commands:\n\n");
        for my $cmd (sort(keys(%{$cmds}))) {
            printf("%-18s %s\n",$cmd,$cmds->{$cmd}{help});
        }
        return;
    }

    my ($username,$key);
    if (defined($option->{credfile})) {
        my $cred = HC::CredentialStore->new($option->{credfile});
        die("credfile error") if (!defined($cred));

        ($username,$key) = $cred->lookup($option->{preset});
    }

    die "Need username credentials" if (!defined($username));
    die "Need key credentials" if (!defined($key));

    my $client = REST::JSONRequest->new();
    $client->set_urlprefix('https://panel.cloudatcost.com/');

    my $cache = HC::Cache::Dir->new();
    $cache->set_cachedir(calculate_cachedir());

    my $cloudatcost = CloudAtCost->new();
    $cloudatcost->set_Request($client);
    $cloudatcost->set_Cache($cache);
    $cloudatcost->set_credentials($username,$key);

    my $cmd = shift(@ARGV);
    if (!defined($cmd) || !defined($cmds->{$cmd})) {
        die('No such sub-command');
    }

    my $result = $cmds->{$cmd}{'cmd'}($cloudatcost,@ARGV);
    print Dumper($result);
}
main();

