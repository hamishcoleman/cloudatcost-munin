#!/usr/bin/env perl
use warnings;
use strict;
#
# Quick commandline tool to call each cloudatcost API entry point
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use HC::Common;

use HC::CredentialStore;
use HC::Cache::Dir;
use HC::HackDB;
use REST::JSONRequest;
use CloudAtCost;


my $option = {
    preset   => 'cac',
    verbose  => 0,
};
my @option_list = (
    "preset|s=s",
    "credfile=s",
    "verbose|v+",
    "cachedir=s",
);

# FIXME - should this logic move into the cache package?
sub calculate_cachedir {
    if (defined($option->{cachedir})) {
        # manually setting it on the cmdline takes precedence
        return $option->{cachedir};
    }

    # finally, fall back to something in our home directory
    return $ENV{'HOME'}.'/.cache/cloudatcost';
}

sub render_error {
    my $service = shift;
    my $s;

    if ($option->{verbose}) {
        $s .= "\n".Dumper($service)."\n";
    }

    $s .= "error: ".$service->error()." ".$service->error_description."\n";
    return $s;
}

sub simple_query {
    my $service = shift;
    my $method = shift;
    my $result = $service->$method();
    return render_error($service) if (!defined($result));
    my $s = '';

    if ($option->{verbose}) {
        $s .= "\n".Dumper($service->prev_full_result())."\n";
    }

    $s .= $result->extract(@_)->to_string_pretty();

    return $s;
}

sub simple_action {
    my $service = shift;
    my $method = shift;
    my $result = $service->$method(@_);
    return render_error($service) if (!defined($result));
    my $s = '';

    if ($option->{verbose}) {
        $s .= "\n".Dumper($service->prev_full_result())."\n";
    }
    $s.="OK\n";
    return $s;
}

sub cmd_listservers {
    my $service = shift;
    return simple_query($service,'listservers',
        qw(sid hostname ip cpu ram storage mode status)
    );
}

sub cmd_listtemplates {
    my $service = shift;
    return simple_query($service,'listtemplates',
        qw(ce_id name)
    );
}

sub cmd_listtasks {
    my $service = shift;
    return simple_query($service,'listtasks',
        qw(cid starttime serverid action status servername)
    );
}

sub cmd_powerop {
    my $service = shift;
    # sid, action
    return simple_action($service,'powerop',@_);
}

sub cmd_runmode {
    my $service = shift;
    # sid, mode
    return simple_action($service,'runmode',@_);
}

sub cmd_renameserver {
    my $service = shift;
    # sid, name
    return simple_action($service,'renameserver',@_);
}

sub cmd_rdns {
    my $service = shift;
    # sid, hostname
    return simple_action($service,'rdns',@_);
}

sub cmd_console {
    my $service = shift;
    # sid
    my $s = simple_action($service,'console',@_);

    my $result = $service->prev_full_result();
    if (defined($result->{console})) {
        $s.=$result->{console}."\n";
    }
    return $s;
}

sub cmd_build {
    my $service = shift;
    my %fields;
    for my $param (@_) {
        my ($key,$val) = split('=',$param);
        $fields{$key} = $val;
    }
    my $s = simple_action($service,'build',%fields);

    my $result = $service->prev_full_result();
    if (defined($result->{taskid})) {
        $s.=$result->{taskid}."\n";
    }
    if (defined($result->{servername})) {
        $s.=$result->{servername}."\n";
    }
    return $s;
}

sub cmd_delete {
    my $service = shift;
    # sid
    return simple_action($service,'delete',@_);
}

sub cmd_resources {
    my $service = shift;
    my $resources = $service->resources();
    my $s = '';

    if ($option->{verbose}) {
        $s .= "\n".Dumper($resources)."\n";
    }

    my $table = HC::HackDB->new();
    $table->set_column_names(qw(type cpu ram storage));
    $table->add_row($table->empty_row()->set_from_hash({
        type    => 'used',
        cpu     => $resources->{used}{cpu_used},
        ram     => $resources->{used}{ram_used},
        storage => $resources->{used}{storage_used},
    }));
    $table->add_row($table->empty_row()->set_from_hash({
        type    => 'total',
        cpu     => $resources->{total}{cpu_total},
        ram     => $resources->{total}{ram_total},
        storage => $resources->{total}{storage_total},
    }));

    $s .= $table->to_string_pretty();

    return $s;
}

sub cmd_fixme {
    die "FIXME";
}

my $cmds = {
    'listservers'   => {
        cmd  => \&cmd_listservers,
        help => 'List all servers on the account',
    },
    'listtemplates' => {
        cmd  => \&cmd_listtemplates,
        help => 'List all templates available',
    },
    'listtasks' => {
        cmd  => \&cmd_listtasks,
        help => 'List all tasks in operation',
    },
    'powerop' => {
        cmd  => \&cmd_powerop,
        help => 'Activate server power operations',
    },
    'runmode' => {
        cmd  => \&cmd_runmode,
        help => 'Set the run mode of the server',
    },
    'renameserver' => {
        cmd  => \&cmd_renameserver,
        help => 'Rename the server label',
    },
    'rdns' => {
        cmd  => \&cmd_rdns,
        help => 'Modify the reverse DNS & hostname of the VPS',
    },
    'console' => {
        cmd  => \&cmd_console,
        help => 'Request URL for console access',
    },
    'cloudpro/build' => {
        cmd  => \&cmd_build,
        help => 'Build a server from available resources',
    },
    'cloudpro/delete' => {
        cmd  => \&cmd_delete,
        help => 'Delete / terminate server to add resources',
    },
    'cloudpro/resources' => {
        cmd  => \&cmd_resources,
        help => 'Display resources available and resources used in cloud-pro',
    },
};

sub main() { 
    HC::Common::do_options($option,@option_list);
    if (defined($option->{help})) {
        print("Sub commands:\n\n");
        for my $cmd (sort(keys(%{$cmds}))) {
            printf("%-18s %s\n",$cmd,$cmds->{$cmd}{help});
        }
        return;
    }

    my ($username,$key);
    if (defined($option->{credfile})) {
        my $cred = HC::CredentialStore->new($option->{credfile});
        die("credfile error") if (!defined($cred));

        ($username,$key) = $cred->lookup($option->{preset});
    }

    die "Need username credentials" if (!defined($username));
    die "Need key credentials" if (!defined($key));

    my $client = REST::JSONRequest->new();
    $client->set_urlprefix('https://panel.cloudatcost.com/');

    my $cache = HC::Cache::Dir->new();
    $cache->set_cachedir(calculate_cachedir());

    my $cloudatcost = CloudAtCost->new();
    $cloudatcost->set_Request($client);
    $cloudatcost->set_Cache($cache);
    $cloudatcost->set_credentials($username,$key);

    my $cmd = shift(@ARGV);
    if (!defined($cmd) || !defined($cmds->{$cmd})) {
        die('No such sub-command');
    }

    my $result = $cmds->{$cmd}{'cmd'}($cloudatcost,@ARGV);
    print $result;
}
main();

