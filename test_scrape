#!/usr/bin/env perl
use warnings;
use strict;

# allow the libs to be in the bin dir
use FindBin;
use lib "/home/hamish/s/bin/lib";
use lib "$FindBin::RealBin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use HC::Common;

use HC::CredentialStore;
use HC::HackDB;

use CloudAtCostScrape;

my $option = {
    preset   => 'cac',
    verbose  => 0,
};
my @option_list = (
    "preset|s=s",
    "credfile=s",
    "verbose|v+",
    "debug!",
    "raw!",
);

sub raw_output {
    my $data = shift;
    if ($option->{raw}) {
        return "\n".Dumper($data)."\n";
    }
    return '';
}

sub server_lookupsid {
    my $cac = shift;
    my $sid = shift;

    my $data = $cac->_scrape_index();
    my $server = $data->{servers}{$sid};

    if (!defined($server)) {
        die("Unknown server id $sid");
    }
    return $server;
}

sub cmd_buildstatus {
    my $cac = shift;

    return Dumper($cac->_siteFunctions_buildStatus());
}

sub cmd_listservers {
    my $cac = shift;

    my @fields = qw(
        id
        servername
        ipv4_address
        ipv6_address
        cpu
        ram
        ssd
        _status
    );

    push @fields, @_;

    my $data = $cac->_scrape_index();

    my $s = '';
    $s .= raw_output($data);

    my $hackdb = HC::HackDB->new();
    $hackdb->add_rows_hash($data->{servers});

    $s .= $hackdb->extract(@fields)->order_by('servername')->to_string_pretty();
    # cpu ram storage mode

    return $s;
}

sub cmd_listtemplates {
    my $cac = shift;
    my $data = $cac->_scrape_templates();

    my $s = '';
    $s .= raw_output($data);

    my $hackdb = HC::HackDB->new();
    $hackdb->add_rows_array($data->{data});

    $s .= $hackdb->extract(qw(id detail))->order_by('detail')->to_string_pretty();

    return $s;
}

sub cmd_renameserver {
    my $cac = shift;
    my $sid = shift;
    my $name = shift;

    my $server = server_lookupsid($cac, $sid);
    my $result = $server->rename($name);

    return raw_output($result);
}

sub cmd_poweroff {
    my $cac = shift;
    my $sid = shift;

    my $server = server_lookupsid($cac, $sid);
    my $result = $server->poweroff();

    return raw_output($result);
}

sub cmd_poweron {
    my $cac = shift;
    my $sid = shift;

    my $server = server_lookupsid($cac, $sid);
    my $result = $server->poweron();

    return raw_output($result);
}

sub cmd_output_dns {
    my $cac = shift;

    my @fields = qw(
        id
        servername
        ipv4_address
        ipv6_address
        cpu
        ram
        ssd
        _status
    );

    push @fields, @_;

    my $data = $cac->_scrape_index();
    my $hackdb = HC::HackDB->new();
    $hackdb->add_rows_hash($data->{servers});

    $hackdb = $hackdb->extract(@fields)->order_by('servername');

    my $servers = {};
    my $s = '';

    $s .= "; BEGIN CloudAtCostScrape autogenerated DNS entries\n";
    # TODO
    # - output username as well?
    # - $s .= "; $ORIGIN zone\n";

    $hackdb->foreach(sub {
        my $row = $_;
        my $servername = $row->field('servername');
        my $ipv4_address = $row->field('ipv4_address');
        my $ipv6_address = $row->field('ipv6_address');

        my $comment;
        if (defined($servers->{$servername})) {
            # this is a duplicate name
            $comment = 1;
            $s .= "; WARN: duplicate server name\n";
        }
        $servers->{$servername}++;

        if (defined($ipv4_address)) {
            $s .= sprintf("%-20s IN A    %s\n", $servername, $ipv4_address);
        }
        if (defined($ipv6_address)) {
            $s .= sprintf("%-20s IN AAAA %s\n", $servername, $ipv6_address);
        }
    });

    $s .= "; END CloudAtCostScrape\n";

    return $s;
}

sub cmd_todo {
    ...;
}

my $cmds = {
    'buildstatus'   => {
        cmd  => \&cmd_buildstatus,
        help => 'Return the current build status',
    },
    'listservers'   => {
        cmd  => \&cmd_listservers,
        help => 'Scape the server details',
    },
    'listtemplates'   => {
        cmd  => \&cmd_listtemplates,
        help => 'Scape the vm template details',
    },
    'build-cloud-pro' => {
        cmd  => \&cmd_todo,
        help => 'TODO',
    },
    'poweroff' => {
        cmd  => \&cmd_poweroff,
        help => 'Power off server',
    },
    'poweron' => {
        cmd  => \&cmd_poweron,
        help => 'Power on server',
    },
    'delete' => {
        cmd  => \&cmd_todo,
        help => 'TODO',
    },
    'renameserver' => {
        cmd  => \&cmd_renameserver,
        help => 'Rename the server with the given sid',
    },
    'console' => {
        cmd  => \&cmd_todo,
        help => 'TODO',
    },
    'output_dns' => {
        cmd  => \&cmd_output_dns,
        help => 'Print out a the zonefile entries needed to define these servers',
    },
};


sub main() {
    HC::Common::do_options($option,@option_list);
    HC::Common::subcommand_help($option, $cmds) && return;

    my $cred = HC::CredentialStore->new($option->{credfile});

    my ($username,$password) = $cred->lookup($option->{preset});

    die "Need username credentials" if (!defined($username));
    die "Need password credentials" if (!defined($password));

    my $cac = CloudAtCostScrape->new();
    if ($option->{debug}) {
        # TODO: perhaps create a debug method on the CloudAtCostScrape object
        $cac->Mech()->add_handler("request_send", sub { shift->dump; return });
        $cac->Mech()->add_handler("request_done", sub { shift->dump; return });
    }

    $cac->set_credentials($username,$password);

    my $cmd = shift(@ARGV);
    print(HC::Common::subcommand($cmds, $cmd, $cac));
}
main();

