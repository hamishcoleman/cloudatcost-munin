#!/usr/bin/env perl
use warnings;
use strict;

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use HC::Common;

use HC::CredentialStore;

use CloudAtCostScrape;

my $option = {
    preset   => 'cac',
    verbose  => 0,
};
my @option_list = (
    "preset|s=s",
    "credfile=s",
    "verbose|v+",
    "debug!",
);

sub cmd_buildstatus {
    my $cac = shift;

    return $cac->_siteFunctions_buildStatus();
}

my $cmds = {
    'buildstatus'   => {
        cmd  => \&cmd_buildstatus,
        help => 'Return the current build status',
    },
};


sub main() { 
    HC::Common::do_options($option,@option_list);
    if (defined($option->{help})) {
        print("Sub commands:\n\n");
        for my $cmd (sort(keys(%{$cmds}))) {
            printf("%-18s %s\n",$cmd,$cmds->{$cmd}{help});
        }
        return;
    }

    my ($username,$password);
    if (defined($option->{credfile})) {
        my $cred = HC::CredentialStore->new($option->{credfile});
        die("credfile error") if (!defined($cred));

        ($username,$password) = $cred->lookup($option->{preset});
    }

    die "Need username credentials" if (!defined($username));
    die "Need password credentials" if (!defined($password));

    my $cac = CloudAtCostScrape->new();
    if ($option->{debug}) {
        # TODO: perhaps create a debug method on the CloudAtCostScrape object
        $cac->Mech()->add_handler("request_send", sub { shift->dump; return });
        $cac->Mech()->add_handler("request_done", sub { shift->dump; return });
    }

    $cac->set_credentials($username,$password);

    my $cmd = shift(@ARGV);
    if (!defined($cmd) || !defined($cmds->{$cmd})) {
        die('No such sub-command');
    }

    my $result = $cmds->{$cmd}{'cmd'}($cac,@ARGV);;

    print("\n\n");
    print(Dumper($result));

}
main();

