#!/usr/bin/env perl
use warnings;
use strict;

# allow the libs to be in the bin dir
use FindBin;
use lib "/home/hamish/s/bin/lib";
use lib "$FindBin::RealBin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use HC::Common;

use HC::CredentialStore;
use HC::HackDB;

use CloudAtCostScrape;

my $option = {
    preset   => 'cac',
    verbose  => 0,
};
my @option_list = (
    "preset|s=s",
    "credfile=s",
    "verbose|v+",
    "debug!",
    "raw!",
);

sub data2hackdb {
    my $data = shift;
    return undef if (!$data);

    if (ref($data) eq 'HASH') {
        # assume that hashes are simply unique arrays and the key has no meaning
        my $newdata = qw();
        @{$newdata} = values(%{$data});
        $data = $newdata;
    }

    my $db = HC::HackDB->new();
    for my $data_row (@{$data}) {
        my $row = $db->empty_row();

        $row->set_from_hash($data_row);
        $db->add_row($row);
    }
    return $db;
}

sub raw_output {
    my $data = shift;
    if ($option->{raw}) {
        return "\n".Dumper($data)."\n";
    }
    return '';
}

sub server_lookupsid {
    my $cac = shift;
    my $sid = shift;

    my $data = $cac->_scrape_index();
    my $server = $data->{servers}{$sid};

    if (!defined($server)) {
        die("Unknown server id $sid");
    }
    return $server;
}

sub cmd_buildstatus {
    my $cac = shift;

    return Dumper($cac->_siteFunctions_buildStatus());
}

sub cmd_listservers {
    my $cac = shift;

    my @fields = qw(
        id
        servername
        ipv4_address
        ipv6_address
        cpu
        ram
        ssd
        _status
    );

    push @fields, @_;

    my $data = $cac->_scrape_index();

    my $s = '';
    $s .= raw_output($data);

    my $hackdb = data2hackdb($data->{servers});
    $s .= $hackdb->extract(@fields)->to_string_pretty();
    # cpu ram storage mode

    return $s;
}

sub cmd_listtemplates {
    my $cac = shift;
    my $data = $cac->_scrape_templates();

    my $s = '';
    $s .= raw_output($data);

    my $hackdb = data2hackdb($data->{data});
    $s .= $hackdb->extract(qw(id detail))->to_string_pretty();

    return $s;
}

sub cmd_renameserver {
    my $cac = shift;
    my $sid = shift;
    my $name = shift;

    my $server = server_lookupsid($cac, $sid);
    my $result = $server->rename($name);

    return raw_output($result);
}

sub cmd_poweroff {
    my $cac = shift;
    my $sid = shift;

    my $server = server_lookupsid($cac, $sid);
    my $result = $server->poweroff();

    return raw_output($result);
}

sub cmd_poweron {
    my $cac = shift;
    my $sid = shift;

    my $server = server_lookupsid($cac, $sid);
    my $result = $server->poweron();

    return raw_output($result);
}

sub cmd_todo {
    ...;
}

my $cmds = {
    'buildstatus'   => {
        cmd  => \&cmd_buildstatus,
        help => 'Return the current build status',
    },
    'listservers'   => {
        cmd  => \&cmd_listservers,
        help => 'Scape the server details',
    },
    'listtemplates'   => {
        cmd  => \&cmd_listtemplates,
        help => 'Scape the vm template details',
    },
    'build-cloud-pro' => {
        cmd  => \&cmd_todo,
        help => 'TODO',
    },
    'poweroff' => {
        cmd  => \&cmd_poweroff,
        help => 'Power off server',
    },
    'poweron' => {
        cmd  => \&cmd_poweron,
        help => 'Power on server',
    },
    'delete' => {
        cmd  => \&cmd_todo,
        help => 'TODO',
    },
    'renameserver' => {
        cmd  => \&cmd_renameserver,
        help => 'Rename the server with the given sid',
    },
    'console' => {
        cmd  => \&cmd_todo,
        help => 'TODO',
    },
};


sub main() {
    HC::Common::do_options($option,@option_list);
    HC::Common::subcommand_help($option, $cmds) && return;

    my $cred = HC::CredentialStore->new($option->{credfile});

    my ($username,$password) = $cred->lookup($option->{preset});

    die "Need username credentials" if (!defined($username));
    die "Need password credentials" if (!defined($password));

    my $cac = CloudAtCostScrape->new();
    if ($option->{debug}) {
        # TODO: perhaps create a debug method on the CloudAtCostScrape object
        $cac->Mech()->add_handler("request_send", sub { shift->dump; return });
        $cac->Mech()->add_handler("request_done", sub { shift->dump; return });
    }

    $cac->set_credentials($username,$password);

    my $cmd = shift(@ARGV);
    print(HC::Common::subcommand($cmds, $cmd, $cac));
}
main();

